!function(root,factory){"object"==typeof exports&&"object"==typeof module?module.exports=factory(require("React")):"function"==typeof define&&define.amd?define(["React"],factory):"object"==typeof exports?exports.Webcam=factory(require("React")):root.Webcam=factory(root.React)}(this,function(__WEBPACK_EXTERNAL_MODULE_2__){return function(modules){function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:!1};return modules[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.loaded=!0,module.exports}var installedModules={};return __webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.p="",__webpack_require__(0)}([function(module,exports,__webpack_require__){module.exports=__webpack_require__(1)},function(module,exports,__webpack_require__){function hasGetUserMedia(){return!!(navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia||navigator.msGetUserMedia)}var React=__webpack_require__(2);module.exports=React.createClass({displayName:"Webcam",getDefaultProps:function(){return{audio:!0,height:480,width:640}},getInitialState:function(){return{on:!1}},statics:{mountedInstances:[],userMediaRequested:!1},componentWillMount:function(){Webcam.mountedInstances.push(this)},componentDidMount:function(){function sourceSelected(audioSource,videoSource){var constraints={video:{optional:[{sourceId:videoSource}]}};self.props.audio&&(constraints.audio={optional:[{sourceId:audioSource}]}),navigator.getUserMedia(constraints,function(stream){Webcam.mountedInstances.forEach(function(instance){instance._successCallback(stream)})},function(e){Webcam.mountedInstances.forEach(function(instance){instance._errorCallback(e)})})}self=this,hasGetUserMedia()&&(Webcam.userMediaRequested||(navigator.getUserMedia=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia||navigator.msGetUserMedia,this.props.audioSource&&this.props.videoSource?sourceSelected(this.props.audioSource,this.props.videoSource):MediaStreamTrack.getSources(function(sourceInfos){var audioSource=null,videoSource=null;sourceInfos.forEach(function(sourceInfo){"audio"===sourceInfo.kind?audioSource=sourceInfo.id:"video"===sourceInfo.kind&&(videoSource=sourceInfo.id)}),sourceSelected(audioSource,videoSource)}),Webcam.userMediaRequested=!0))},_successCallback:function(stream){var video=this.refs.video.getDOMNode();this.setState({on:!0}),video.src=window.URL.createObjectURL(stream)},_errorCallback:function(){video.src=self.props.fallbackURL},componentWillUnmount:function(){var url=video.src,video=this.refs.video.getDOMNode();window.URL.revokeObjectUrl(url)},getScreenshot:function(){if(this.state.on){var video=this.refs.video.getDOMNode(),canvas=document.createElement("canvas");canvas.height=video.clientHeight,canvas.width=video.clientWidth;var ctx=canvas.getContext("2d");return ctx.drawImage(video,0,0,canvas.width,canvas.height),canvas.toDataURL("image/webp")}},render:function(){return React.createElement("video",{autoPlay:!0,width:this.props.width,height:this.props.height,ref:"video"})}})},function(module){module.exports=__WEBPACK_EXTERNAL_MODULE_2__}])});
//# sourceMappingURL=react-webcam.min.map